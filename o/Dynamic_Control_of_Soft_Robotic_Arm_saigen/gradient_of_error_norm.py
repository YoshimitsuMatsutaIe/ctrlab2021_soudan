import numpy as np
from numpy import sqrt

def f(
    Xd, q, xi,
    r, L0,
    c1, c2, c3, c4, c5, c6, c7, c8, c9,
    ):
    """エンドエフェクタと目標座標の誤差ノルムの勾配ベクトル"""
    
    
    l1 = q[0, 0]
    l2 = q[1, 0]
    l3 = q[2, 0]
    
    xd = Xd[0, 0]
    yd = Xd[1, 0]
    zd = Xd[2, 0]
    
    return np.array([
        [((xd + xi**2*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + xi**6*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - xi**8*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + xi**10*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))*(2*xi**2*(2*l1 - l2 - l3)/(c5*r) + 4*xi**2*(3*L0 + l1 + l2 + l3)/(c5*r) - 2*xi**4*(2*l1 - l2 - l3)**2*(3*L0 + l1 + l2 + l3)/(c4*r**3) - 2*xi**4*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) - 4*xi**4*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*xi**6*(2*l1 - l2 - l3)*(4*l1 - 2*l2 - 2*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c3*r**5) + 2*xi**6*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) + 4*xi**6*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*xi**8*(2*l1 - l2 - l3)*(6*l1 - 3*l2 - 3*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c2*r**7) - 2*xi**8*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) - 4*xi**8*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*xi**10*(2*l1 - l2 - l3)*(8*l1 - 4*l2 - 4*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c1*r**9) + 2*xi**10*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9) + 4*xi**10*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))/2 + (yd + sqrt(3)*xi**2*(l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - sqrt(3)*xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + sqrt(3)*xi**6*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - sqrt(3)*xi**8*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + sqrt(3)*xi**10*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))*(2*sqrt(3)*xi**2*(l2 - l3)/(c5*r) - 2*sqrt(3)*xi**4*(2*l1 - l2 - l3)**2*(3*L0 + l1 + l2 + l3)/(c4*r**3) - 2*sqrt(3)*xi**4*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) - 4*sqrt(3)*xi**4*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*sqrt(3)*xi**6*(l2 - l3)*(4*l1 - 2*l2 - 2*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c3*r**5) + 2*sqrt(3)*xi**6*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*sqrt(3)*xi**8*(l2 - l3)*(6*l1 - 3*l2 - 3*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c2*r**7) - 2*sqrt(3)*xi**8*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*sqrt(3)*xi**10*(l2 - l3)*(8*l1 - 4*l2 - 4*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c1*r**9) + 2*sqrt(3)*xi**10*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))/2 + (-xi*(3*L0 + l1 + l2 + l3)/3 + zd + xi**3*(3*L0 + l1 + l2 + l3)*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 2*xi**5*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 4*xi**7*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 2*xi**9*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))*(-2*xi/3 + 2*xi**3*(4*l1 - 2*l2 - 2*l3)*(3*L0 + l1 + l2 + l3)/(c9*r**2) + 2*xi**3*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 4*xi**5*(4*l1 - 2*l2 - 2*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c8*r**4) - 4*xi**5*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 8*xi**7*(6*l1 - 3*l2 - 3*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c7*r**6) + 8*xi**7*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 4*xi**9*(8*l1 - 4*l2 - 4*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c6*r**8) - 4*xi**9*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))/2)/sqrt((xd + xi**2*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + xi**6*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - xi**8*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + xi**10*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))**2 + (yd + sqrt(3)*xi**2*(l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - sqrt(3)*xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + sqrt(3)*xi**6*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - sqrt(3)*xi**8*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + sqrt(3)*xi**10*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))**2 + (-xi*(3*L0 + l1 + l2 + l3)/3 + zd + xi**3*(3*L0 + l1 + l2 + l3)*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 2*xi**5*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 4*xi**7*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 2*xi**9*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))**2)],
        [((xd + xi**2*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + xi**6*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - xi**8*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + xi**10*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))*(2*xi**2*(2*l1 - l2 - l3)/(c5*r) - 2*xi**2*(3*L0 + l1 + l2 + l3)/(c5*r) - 2*xi**4*(-l1 + 4*l2 - l3)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c4*r**3) - 2*xi**4*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*xi**4*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*xi**6*(-2*l1 + 8*l2 - 2*l3)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c3*r**5) + 2*xi**6*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*xi**6*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*xi**8*(-3*l1 + 12*l2 - 3*l3)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c2*r**7) - 2*xi**8*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*xi**8*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*xi**10*(-4*l1 + 16*l2 - 4*l3)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c1*r**9) + 2*xi**10*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9) - 2*xi**10*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))/2 + (yd + sqrt(3)*xi**2*(l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - sqrt(3)*xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + sqrt(3)*xi**6*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - sqrt(3)*xi**8*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + sqrt(3)*xi**10*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))*(2*sqrt(3)*xi**2*(l2 - l3)/(c5*r) + 2*sqrt(3)*xi**2*(3*L0 + l1 + l2 + l3)/(c5*r) - 2*sqrt(3)*xi**4*(-l1 + 4*l2 - l3)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c4*r**3) - 2*sqrt(3)*xi**4*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*sqrt(3)*xi**4*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*sqrt(3)*xi**6*(l2 - l3)*(-2*l1 + 8*l2 - 2*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c3*r**5) + 2*sqrt(3)*xi**6*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) + 2*sqrt(3)*xi**6*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*sqrt(3)*xi**8*(l2 - l3)*(-3*l1 + 12*l2 - 3*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c2*r**7) - 2*sqrt(3)*xi**8*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) - 2*sqrt(3)*xi**8*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*sqrt(3)*xi**10*(l2 - l3)*(-4*l1 + 16*l2 - 4*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c1*r**9) + 2*sqrt(3)*xi**10*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9) + 2*sqrt(3)*xi**10*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))/2 + (-xi*(3*L0 + l1 + l2 + l3)/3 + zd + xi**3*(3*L0 + l1 + l2 + l3)*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 2*xi**5*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 4*xi**7*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 2*xi**9*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))*(-2*xi/3 + 2*xi**3*(-2*l1 + 8*l2 - 2*l3)*(3*L0 + l1 + l2 + l3)/(c9*r**2) + 2*xi**3*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 4*xi**5*(-2*l1 + 8*l2 - 2*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c8*r**4) - 4*xi**5*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 8*xi**7*(-3*l1 + 12*l2 - 3*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c7*r**6) + 8*xi**7*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 4*xi**9*(-4*l1 + 16*l2 - 4*l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c6*r**8) - 4*xi**9*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))/2)/sqrt((xd + xi**2*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + xi**6*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - xi**8*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + xi**10*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))**2 + (yd + sqrt(3)*xi**2*(l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - sqrt(3)*xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + sqrt(3)*xi**6*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - sqrt(3)*xi**8*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + sqrt(3)*xi**10*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))**2 + (-xi*(3*L0 + l1 + l2 + l3)/3 + zd + xi**3*(3*L0 + l1 + l2 + l3)*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 2*xi**5*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 4*xi**7*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 2*xi**9*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))**2)],
        [((xd + xi**2*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + xi**6*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - xi**8*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + xi**10*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))*(2*xi**2*(2*l1 - l2 - l3)/(c5*r) - 2*xi**2*(3*L0 + l1 + l2 + l3)/(c5*r) - 2*xi**4*(-l1 - l2)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c4*r**3) - 2*xi**4*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*xi**4*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*xi**6*(-2*l1 - 2*l2)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c3*r**5) + 2*xi**6*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*xi**6*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*xi**8*(-3*l1 - 3*l2)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c2*r**7) - 2*xi**8*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*xi**8*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*xi**10*(-4*l1 - 4*l2)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c1*r**9) + 2*xi**10*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9) - 2*xi**10*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))/2 + (yd + sqrt(3)*xi**2*(l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - sqrt(3)*xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + sqrt(3)*xi**6*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - sqrt(3)*xi**8*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + sqrt(3)*xi**10*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))*(2*sqrt(3)*xi**2*(l2 - l3)/(c5*r) - 2*sqrt(3)*xi**2*(3*L0 + l1 + l2 + l3)/(c5*r) - 2*sqrt(3)*xi**4*(-l1 - l2)*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c4*r**3) - 2*sqrt(3)*xi**4*(2*l1 - l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*sqrt(3)*xi**4*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + 2*sqrt(3)*xi**6*(-2*l1 - 2*l2)*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c3*r**5) + 2*sqrt(3)*xi**6*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*sqrt(3)*xi**6*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - 2*sqrt(3)*xi**8*(-3*l1 - 3*l2)*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c2*r**7) - 2*sqrt(3)*xi**8*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*sqrt(3)*xi**8*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + 2*sqrt(3)*xi**10*(-4*l1 - 4*l2)*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c1*r**9) + 2*sqrt(3)*xi**10*(l2 - l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9) - 2*sqrt(3)*xi**10*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))/2 + (-xi*(3*L0 + l1 + l2 + l3)/3 + zd + xi**3*(3*L0 + l1 + l2 + l3)*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 2*xi**5*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 4*xi**7*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 2*xi**9*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))*(-2*xi/3 + 2*xi**3*(-2*l1 - 2*l2)*(3*L0 + l1 + l2 + l3)/(c9*r**2) + 2*xi**3*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 4*xi**5*(-2*l1 - 2*l2)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c8*r**4) - 4*xi**5*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 8*xi**7*(-3*l1 - 3*l2)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c7*r**6) + 8*xi**7*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 4*xi**9*(-4*l1 - 4*l2)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c6*r**8) - 4*xi**9*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))/2)/sqrt((xd + xi**2*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + xi**6*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - xi**8*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + xi**10*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))**2 + (yd + sqrt(3)*xi**2*(l2 - l3)*(3*L0 + l1 + l2 + l3)/(c5*r) - sqrt(3)*xi**4*(2*l1 - l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)/(c4*r**3) + sqrt(3)*xi**6*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c3*r**5) - sqrt(3)*xi**8*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c2*r**7) + sqrt(3)*xi**10*(l2 - l3)*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c1*r**9))**2 + (-xi*(3*L0 + l1 + l2 + l3)/3 + zd + xi**3*(3*L0 + l1 + l2 + l3)*(2*l1**2 - 2*l1*l2 - 2*l1*l3 + 4*l2**2 - 2*l2*l3)/(c9*r**2) - 2*xi**5*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**2/(c8*r**4) + 4*xi**7*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**3/(c7*r**6) - 2*xi**9*(3*L0 + l1 + l2 + l3)*(l1**2 - l1*l2 - l1*l3 + 2*l2**2 - l2*l3)**4/(c6*r**8))**2)]
    ])